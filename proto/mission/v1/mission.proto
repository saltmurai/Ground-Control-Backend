syntax = "proto3";

package mission.v1;

option go_package = "github.com/saltmurai/drone-api-service/missionv1";

service MissionService {
	// Send a mission to the drone.
	rpc SendMission (SendMissionRequest) returns (SendMissionResponse) {}
}

enum Termination {
	TERMINATION_UNSPECIFIED = 0;
	TERMINATION_AUTO = 1;
	TERMINATION_STD = 2;
}

enum Action {
	ACTION_UNSPECIFIED = 0;
	ACTION_TAKEOFF = 1;
	ACTION_DISARM = 2;
	ACTION_SELFCHECK = 3;
	ACTION_RELEASE = 4;
	ACTION_RTLHOME = 5;
	ACTION_HOLD = 6;
	ACTION_AUTOLAND = 7; 
}

enum Planner {
	PLANNER_UNSPECIFIED = 0;
	PLANNER_EGO = 1;
	PLANNER_FAST = 2;
	PLANNER_MARKER = 3;
	PLANNER_SAFELAND = 4;
}

enum Controller {
	CONTROLLER_UNSPECIFIED = 0;
	CONTROLLER_PX4_VELO_FB = 1;
	CONTROLLER_A_FB = 2;
	CONTROLLER_A_FW = 3;
	CONTROLLER_A_ADRJ = 4;
}

message vector3 {
	repeated double vector = 1;
}

message InitInstruction {
  // Define a repeated field of integers for the peripheral devices.
  repeated int32 peripheral = 1;
  // Define a string field for the controller.
  Controller controller = 2;
  // Define a string field for the standard.
  Termination terminate = 3;
}

// Define the message for the TRAVEL instruction.
message TravelInstruction {
  // Define a float field for the distance.
	Planner planner = 1;
	repeated vector3 waypoint = 2;
	repeated vector3 constraint = 3;

	// Define a string field for the standard. 
	Termination terminate = 4;

}

// Define the message for the ACTION instruction.
message ActionInstruction {
  // Define a string field for the action type.
  Action action = 1;
  // This field is optionals only for release command. If it is not populated, the default value is 0.
  repeated int32 package = 2;
	// For takoff, land. Optional. If not populated, the default value is 0.
	double param = 3;
}

// Define the message for a mission, which is a sequence of INIT, TRAVEL,
// and ACTION instructions.

message SequenceItem {
  oneof sequence {
    InitInstruction init_sequence = 1;
    ActionInstruction action_sequence = 2;
    TravelInstruction travel_sequence = 3;
  }
}


message SendMissionRequest {
  // Define a unique ID for the mission.
  string id = 1;
	int32 length = 2;
	string description = 3;
	repeated SequenceItem sequence_items = 4;

}

// For later use. Sending single instruction only
message SingleInstruction {
	SequenceItem sequence_item = 1;
}

message SendMissionResponse {
  // Define a boolean field to indicate success or failure.
  bool success = 1;
	string message = 2;
  // Define a string field for any error messages.
  string error_message = 3;
}
