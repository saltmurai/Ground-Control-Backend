// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package gendb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/tabbed/pqtype"
)

const getMission = `-- name: GetMission :one
SELECT id, name, drone_id, package_id, seq_id FROM missions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMission(ctx context.Context, id int64) (Mission, error) {
	row := q.db.QueryRowContext(ctx, getMission, id)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DroneID,
		&i.PackageID,
		&i.SeqID,
	)
	return i, err
}

const insertDrone = `-- name: InsertDrone :one
INSERT INTO drones (
		id,
		name,
		address,
		status
) VALUES (
		$1,
		$2,
		$3,
		$4
) RETURNING id, name, address, status
`

type InsertDroneParams struct {
	ID      uuid.UUID
	Name    string
	Address string
	Status  bool
}

func (q *Queries) InsertDrone(ctx context.Context, arg InsertDroneParams) (Drone, error) {
	row := q.db.QueryRowContext(ctx, insertDrone,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Status,
	)
	var i Drone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Status,
	)
	return i, err
}

const insertPackage = `-- name: InsertPackage :one
INSERT INTO packages (
		name,
		weight
) VALUES (
		$1,
		$2
) RETURNING id, name, weight, height, length, sender_id, receiver_id
`

type InsertPackageParams struct {
	Name   string
	Weight float64
}

func (q *Queries) InsertPackage(ctx context.Context, arg InsertPackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, insertPackage, arg.Name, arg.Weight)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Weight,
		&i.Height,
		&i.Length,
		&i.SenderID,
		&i.ReceiverID,
	)
	return i, err
}

const insertSequence = `-- name: InsertSequence :one
INSERT INTO sequences (
		name,
		description,
		seq,
		created_at
) VALUES (
		$1,
		$2,
		$3,
		$4
) RETURNING id, name, description, seq, created_at
`

type InsertSequenceParams struct {
	Name        sql.NullString
	Description sql.NullString
	Seq         pqtype.NullRawMessage
	CreatedAt   time.Time
}

func (q *Queries) InsertSequence(ctx context.Context, arg InsertSequenceParams) (Sequence, error) {
	row := q.db.QueryRowContext(ctx, insertSequence,
		arg.Name,
		arg.Description,
		arg.Seq,
		arg.CreatedAt,
	)
	var i Sequence
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Seq,
		&i.CreatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
		id,
		name
) VALUES (
		$1,
		$2
) RETURNING id, name
`

type InsertUserParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.ID, arg.Name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listDrones = `-- name: ListDrones :many
SELECT id, name, address, status FROM drones
`

func (q *Queries) ListDrones(ctx context.Context) ([]Drone, error) {
	rows, err := q.db.QueryContext(ctx, listDrones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drone
	for rows.Next() {
		var i Drone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMission = `-- name: ListMission :many
SELECT id, name, drone_id, package_id, seq_id FROM missions
`

func (q *Queries) ListMission(ctx context.Context) ([]Mission, error) {
	rows, err := q.db.QueryContext(ctx, listMission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mission
	for rows.Next() {
		var i Mission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DroneID,
			&i.PackageID,
			&i.SeqID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackage = `-- name: ListPackage :many
SELECT id, name, weight, height, length, sender_id, receiver_id FROM packages
`

func (q *Queries) ListPackage(ctx context.Context) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, listPackage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.Height,
			&i.Length,
			&i.SenderID,
			&i.ReceiverID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
