// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package gendb

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const deleteDrone = `-- name: DeleteDrone :many
DELETE FROM drones
WHERE id = $1
RETURNING name
`

func (q *Queries) DeleteDrone(ctx context.Context, id int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, deleteDrone, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteMission = `-- name: DeleteMission :one
DELETE FROM missions
WHERE id = $1
RETURNING id, name, drone_id, package_id, seq_id, image_folder, status
`

func (q *Queries) DeleteMission(ctx context.Context, id int64) (Mission, error) {
	row := q.db.QueryRowContext(ctx, deleteMission, id)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DroneID,
		&i.PackageID,
		&i.SeqID,
		&i.ImageFolder,
		&i.Status,
	)
	return i, err
}

const getDroneByID = `-- name: GetDroneByID :one
SELECT id, name, address, ip, status FROM drones
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDroneByID(ctx context.Context, id int64) (Drone, error) {
	row := q.db.QueryRowContext(ctx, getDroneByID, id)
	var i Drone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Ip,
		&i.Status,
	)
	return i, err
}

const getMission = `-- name: GetMission :one
SELECT m.id, m.name, m.drone_id, m.image_folder, d.ip as drone_ip, s.id as seq_id FROM missions m
JOIN drones d ON m.drone_id = d.id
JOIN sequences s ON m.seq_id = s.id
WHERE m.id = $1 LIMIT 1
`

type GetMissionRow struct {
	ID          int64
	Name        string
	DroneID     int64
	ImageFolder string
	DroneIp     string
	SeqID       int64
}

func (q *Queries) GetMission(ctx context.Context, id int64) (GetMissionRow, error) {
	row := q.db.QueryRowContext(ctx, getMission, id)
	var i GetMissionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DroneID,
		&i.ImageFolder,
		&i.DroneIp,
		&i.SeqID,
	)
	return i, err
}

const getSequenceByID = `-- name: GetSequenceByID :one
SELECT id, name, description, seq, length FROM sequences
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSequenceByID(ctx context.Context, id int64) (Sequence, error) {
	row := q.db.QueryRowContext(ctx, getSequenceByID, id)
	var i Sequence
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Seq,
		&i.Length,
	)
	return i, err
}

const insertDrone = `-- name: InsertDrone :one
INSERT INTO drones (
		name,
		address,
		ip,
		status
) VALUES (
		$1,
		$2,
		$3,
		$4
) RETURNING id, name, address, ip, status
`

type InsertDroneParams struct {
	Name    string
	Address string
	Ip      string
	Status  bool
}

func (q *Queries) InsertDrone(ctx context.Context, arg InsertDroneParams) (Drone, error) {
	row := q.db.QueryRowContext(ctx, insertDrone,
		arg.Name,
		arg.Address,
		arg.Ip,
		arg.Status,
	)
	var i Drone
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Ip,
		&i.Status,
	)
	return i, err
}

const insertMission = `-- name: InsertMission :one
INSERT INTO missions (
		name,
		drone_id,
		package_id,
		seq_id,
		image_folder,
		status
) VALUES (
		$1,
		$2,
		$3,
		$4,
		$5,
		$6
) RETURNING id, name, drone_id, package_id, seq_id, image_folder, status
`

type InsertMissionParams struct {
	Name        string
	DroneID     int64
	PackageID   int64
	SeqID       int64
	ImageFolder string
	Status      string
}

func (q *Queries) InsertMission(ctx context.Context, arg InsertMissionParams) (Mission, error) {
	row := q.db.QueryRowContext(ctx, insertMission,
		arg.Name,
		arg.DroneID,
		arg.PackageID,
		arg.SeqID,
		arg.ImageFolder,
		arg.Status,
	)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DroneID,
		&i.PackageID,
		&i.SeqID,
		&i.ImageFolder,
		&i.Status,
	)
	return i, err
}

const insertPackage = `-- name: InsertPackage :one
INSERT INTO packages (
		name,
		weight,
		height,
		length,
		sender_id,
		receiver_id
) VALUES (
		$1,
		$2,
		$3,
		$4,
		$5,
		$6
) RETURNING id, name, weight, height, length, sender_id, receiver_id
`

type InsertPackageParams struct {
	Name       string
	Weight     float64
	Height     float64
	Length     float64
	SenderID   uuid.UUID
	ReceiverID uuid.UUID
}

func (q *Queries) InsertPackage(ctx context.Context, arg InsertPackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, insertPackage,
		arg.Name,
		arg.Weight,
		arg.Height,
		arg.Length,
		arg.SenderID,
		arg.ReceiverID,
	)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Weight,
		&i.Height,
		&i.Length,
		&i.SenderID,
		&i.ReceiverID,
	)
	return i, err
}

const insertSequence = `-- name: InsertSequence :one
INSERT INTO sequences (
		name,
		description,
		seq,
		length
) VALUES (
		$1,
		$2,
		$3,
		$4
) RETURNING id, name, description, seq, length
`

type InsertSequenceParams struct {
	Name        string
	Description string
	Seq         json.RawMessage
	Length      int64
}

func (q *Queries) InsertSequence(ctx context.Context, arg InsertSequenceParams) (Sequence, error) {
	row := q.db.QueryRowContext(ctx, insertSequence,
		arg.Name,
		arg.Description,
		arg.Seq,
		arg.Length,
	)
	var i Sequence
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Seq,
		&i.Length,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
		id,
		name
) VALUES (
		$1,
		$2
) RETURNING id, name
`

type InsertUserParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.ID, arg.Name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listActiveDrones = `-- name: ListActiveDrones :many
SELECT id, name, address, ip, status FROM drones
WHERE status = true
`

func (q *Queries) ListActiveDrones(ctx context.Context) ([]Drone, error) {
	rows, err := q.db.QueryContext(ctx, listActiveDrones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drone
	for rows.Next() {
		var i Drone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Ip,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDrones = `-- name: ListDrones :many
SELECT id, name, address, ip, status FROM drones
`

func (q *Queries) ListDrones(ctx context.Context) ([]Drone, error) {
	rows, err := q.db.QueryContext(ctx, listDrones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drone
	for rows.Next() {
		var i Drone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Ip,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMissions = `-- name: ListMissions :many
SELECT 
	m.id,
	m.name,
	m.package_id,
	m.status,
	p.name AS package_name,
	m.drone_id,
	d.name AS drone_name,
	m.seq_id,
	s.name AS seq_name
FROM 
missions m
JOIN drones d ON m.drone_id = d.id
JOIN packages p ON m.package_id = p.id
JOIN sequences s ON m.seq_id = s.id
`

type ListMissionsRow struct {
	ID          int64
	Name        string
	PackageID   int64
	Status      string
	PackageName string
	DroneID     int64
	DroneName   string
	SeqID       int64
	SeqName     string
}

func (q *Queries) ListMissions(ctx context.Context) ([]ListMissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listMissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMissionsRow
	for rows.Next() {
		var i ListMissionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PackageID,
			&i.Status,
			&i.PackageName,
			&i.DroneID,
			&i.DroneName,
			&i.SeqID,
			&i.SeqName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackages = `-- name: ListPackages :many
SELECT
    p.id,
    p.name,
    p.weight,
    p.height,
    p.length,
    s.name AS sender_name,
    r.name AS receiver_name
FROM
    packages p
JOIN
    users s ON p.sender_id = s.id
JOIN
    users r ON p.receiver_id = r.id
`

type ListPackagesRow struct {
	ID           int64
	Name         string
	Weight       float64
	Height       float64
	Length       float64
	SenderName   string
	ReceiverName string
}

func (q *Queries) ListPackages(ctx context.Context) ([]ListPackagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listPackages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPackagesRow
	for rows.Next() {
		var i ListPackagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Weight,
			&i.Height,
			&i.Length,
			&i.SenderName,
			&i.ReceiverName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSequences = `-- name: ListSequences :many
SELECT id, name, description, seq, length FROM sequences
`

func (q *Queries) ListSequences(ctx context.Context) ([]Sequence, error) {
	rows, err := q.db.QueryContext(ctx, listSequences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sequence
	for rows.Next() {
		var i Sequence
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Seq,
			&i.Length,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetAllDroneStatus = `-- name: ResetAllDroneStatus :many
UPDATE drones
SET status = false
RETURNING id, name, address, ip, status
`

func (q *Queries) ResetAllDroneStatus(ctx context.Context) ([]Drone, error) {
	rows, err := q.db.QueryContext(ctx, resetAllDroneStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Drone
	for rows.Next() {
		var i Drone
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Ip,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMissionImageFolder = `-- name: UpdateMissionImageFolder :one
UPDATE missions
SET image_folder = $1
WHERE id = $2
RETURNING id, name, drone_id, package_id, seq_id, image_folder, status
`

type UpdateMissionImageFolderParams struct {
	ImageFolder string
	ID          int64
}

func (q *Queries) UpdateMissionImageFolder(ctx context.Context, arg UpdateMissionImageFolderParams) (Mission, error) {
	row := q.db.QueryRowContext(ctx, updateMissionImageFolder, arg.ImageFolder, arg.ID)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DroneID,
		&i.PackageID,
		&i.SeqID,
		&i.ImageFolder,
		&i.Status,
	)
	return i, err
}

const updateMissionStatus = `-- name: UpdateMissionStatus :one
UPDATE missions
SET status = $1
WHERE id = $2
RETURNING id, name, drone_id, package_id, seq_id, image_folder, status
`

type UpdateMissionStatusParams struct {
	Status string
	ID     int64
}

func (q *Queries) UpdateMissionStatus(ctx context.Context, arg UpdateMissionStatusParams) (Mission, error) {
	row := q.db.QueryRowContext(ctx, updateMissionStatus, arg.Status, arg.ID)
	var i Mission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DroneID,
		&i.PackageID,
		&i.SeqID,
		&i.ImageFolder,
		&i.Status,
	)
	return i, err
}
