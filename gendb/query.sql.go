// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package gendb

import (
	"context"
	"database/sql"
)

const createMission = `-- name: CreateMission :one
INSERT INTO missions (
	protobuf
) VALUES ( 
	$1
)
RETURNING id, protobuf, created_at
`

func (q *Queries) CreateMission(ctx context.Context, protobuf sql.NullString) (Mission, error) {
	row := q.db.QueryRowContext(ctx, createMission, protobuf)
	var i Mission
	err := row.Scan(&i.ID, &i.Protobuf, &i.CreatedAt)
	return i, err
}

const getMission = `-- name: GetMission :one
SELECT id, protobuf, created_at FROM missions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMission(ctx context.Context, id int64) (Mission, error) {
	row := q.db.QueryRowContext(ctx, getMission, id)
	var i Mission
	err := row.Scan(&i.ID, &i.Protobuf, &i.CreatedAt)
	return i, err
}

const listMission = `-- name: ListMission :many
SELECT id, protobuf, created_at FROM missions
`

func (q *Queries) ListMission(ctx context.Context) ([]Mission, error) {
	rows, err := q.db.QueryContext(ctx, listMission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mission
	for rows.Next() {
		var i Mission
		if err := rows.Scan(&i.ID, &i.Protobuf, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
